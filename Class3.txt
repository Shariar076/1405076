SELECT EMPLOYEE_ID from EMPLOYEES;

SELECT last_name, salary from EMPLOYEES
WHERE JOB_ID in /*or = */
(
SELECT JOB_ID from EMPLOYEES WHERE EMPLOYEE_ID=141
);

SELECT last_name, salary
from EMPLOYEES
WHERE SALARY >
(
SELECT AVG(SALARY) from EMPLOYEES
)
and JOB_ID IN
(
SELECT JOB_ID FROM EMPLOYEES WHERE LAST_NAME='Abel'
);

SELECT last_name, salary from EMPLOYEES
WHERE JOB_ID in /*or = */
(
SELECT JOB_ID from EMPLOYEES WHERE EMPLOYEE_ID BETWEEN 100 AND 200
);

SELECT E1.Last_name, E1.employee_id
FROM EMPLOYEES E1
WHERE DEPARTMENT_ID IN
(
SELECT E2.DEPARTMENT_ID
from EMPLOYEES E2
WHERE EMPLOYEE_ID = E1.MANAGER_ID /*ek jon employee jei manager er under e kaj kortase sei manager er dept er sob employee er last name ar employee id*/
);

SELECT last_name, job_ID, salary
from EMPLOYEES
WHERE job_id = 'IT_PROG'
and  salary < any /*as we use in for = we'll use any/ all for </>*/
(
select SALARY
FROM EMPLOYEES
WHERE JOB_ID='IT_PROG'
);

SELECT last_name, job_ID, salary
from EMPLOYEES
WHERE job_id <> 'IT_PROG'
and  salary < all /*as we use in for = we'll use any/ all for </>*/
(
select SALARY
FROM EMPLOYEES
WHERE JOB_ID='IT_PROG'
);

/*
<query1>
<set operator>
<query2>
*/

/*
UNION ALL -> Bag
UNION -> Set
INTERSECT ->Set
MINUS ->SET
*/

SELECT EMPLOYEE_ID, JOB_ID
FROM EMPLOYEES
UNION ALL
(
SELECT EMPLOYEE_ID,JOB_ID
FROM JOB_HISTORY
);

SELECT EMPLOYEE_ID, JOB_ID
FROM EMPLOYEES
INTERSECT
(
SELECT EMPLOYEE_ID,JOB_ID
FROM JOB_HISTORY
);

SELECT EMPLOYEE_ID, JOB_ID
FROM EMPLOYEES
MINUS
(
SELECT EMPLOYEE_ID,JOB_ID
FROM JOB_HISTORY
);

SELECT EMPLOYEE_ID, JOB_ID
FROM EMPLOYEES
INTERSECT
(
SELECT DEPARTMENT_ID,EMPLOYEE_ID
FROM JOB_HISTORY
);

SELECT DEPARTMENT_NAME 
FROM DEPARTMENTS D /* D er ekta row er jonno E er sob row check hobe*/
WHERE EXISTS
(
SELECT * 
FROM EMPLOYEES E
WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID AND E.JOB_ID ='IT_PROG'
);

SELECT * 
FROM DEPARTMENTS D /* D er ekta row er jonno E er sob row check hobe*/
WHERE EXISTS
(
SELECT * 
FROM EMPLOYEES E
WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID AND E.JOB_ID ='IT_PROG'
);


SELECT LAST_NAME, SALARY, DEPARTMENT_ID
FROM EMPLOYEES E1
WHERE NOT EXISTS
(
SELECT *
FROM EMPLOYEES E2
WHERE E2.DEPARTMENT_ID = E1.DEPARTMENT_ID AND 
E2.SALARY > E1.SALARY 
);

/*JOIN*/

SELECT LAST_NAME,DEPARTMENT_ID,DEPARTMENT_NAME
FROM EMPLOYEES JOIN DEPARTMENTS USING (DEPARTMENT_ID/*, if we need to chech more eqalities*/);

SELECT LAST_NAME,E.DEPARTMENT_ID,DEPARTMENT_NAME
FROM EMPLOYEES E JOIN DEPARTMENTS D ON (E.DEPARTMENT_ID<>D.DEPARTMENT_ID);/*on thakle condition <> use kora jay*/

/*
LEFT OUTER JOIN
RIGHT OUTER JOIN
*/

SELECT E1.LAST_NAME,E2.LAST_NAME
FROM EMPLOYEES E1 JOIN EMPLOYEES E2
ON (E1.MANAGER_ID=E2.EMPLOYEE_ID);

SELECT E1.LAST_NAME,COUNT(E2.EMPLOYEE_ID) TOTAL 
FROM EMPLOYEES E1 LEFT OUTER JOIN EMPLOYEES E2
ON (E1.EMPLOYEE_ID=E2.MANAGER_ID)
GROUP BY E1.EMPLOYEE_ID, E1.LAST_NAME
ORDER BY TOTAL ASC;

SELECT E1.LAST_NAME,COUNT(E2.EMPLOYEE_ID) TOTAL 
FROM EMPLOYEES E1 FULL OUTER JOIN EMPLOYEES E2
ON (E1.EMPLOYEE_ID=E2.MANAGER_ID)
GROUP BY E1.EMPLOYEE_ID, E1.LAST_NAME
ORDER BY TOTAL ASC;



http://www.w3resource.com/sql-exercises/